% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validateImputedValues.R
\name{validateImputedValues}
\alias{validateImputedValues}
\title{Validate Imputed Values Using Non-negative Matrix Factorization (NMF)}
\usage{
validateImputedValues(dataList, k, dropout, seed = NULL)
}
\arguments{
\item{dataList}{A list of sparse matrices (\code{dgCMatrix}) to be stacked and used for imputation validation.}

\item{k}{An integer specifying the rank (number of components) for NMF decomposition.}

\item{dropout}{A numeric value (between 0 and 1) specifying the proportion of values to randomly mask for validation.}

\item{seed}{An optional numeric value for reproducibility in NMF (default: NULL).}
}
\value{
The trained NMF model (\code{RcppML::nmf} object).
}
\description{
This function evaluates the performance of Non-negative Matrix Factorization (NMF) in imputing missing values
by generating a validation mask, training an NMF model, and assessing reconstruction accuracy.
}
\details{
This function:
\enumerate{
\item Creates a \strong{validation mask} by randomly masking a proportion (\code{dropout}) of the input data.
\item Stacks the input sparse matrices (\code{dataList}) into a single matrix.
\item Replaces the masked values with \code{NaN} in the training data.
\item Runs \strong{Non-negative Matrix Factorization (NMF)} using \code{RcppML::nmf()} on the training data.
}

The commented-out \code{evaluate} function in RcppML can be used to compare the NMF reconstruction
against the original data (\code{stackedData}), evaluating its performance on masked entries.
}
\examples{
library(Matrix)

# Create example sparse matrices
mat1 <- Matrix(sample(c(0, 1), 20, replace = TRUE), nrow = 4, sparse = TRUE)
colnames(mat1) <- c("A", "B", "C", "D", "E")
rownames(mat1) <- paste0("R", 1:4)

mat2 <- Matrix(sample(c(0, 1), 15, replace = TRUE), nrow = 3, sparse = TRUE)
colnames(mat2) <- c("A", "B", "C", "D", "F")
rownames(mat2) <- paste0("R", 5:7)

dataList <- list(mat1, mat2)

# Validate imputed values using NMF with k=2 and 20\% dropout
model <- validateImputedValues(dataList, k = 2, dropout = 0.2, seed = 42)

print(model)

}
